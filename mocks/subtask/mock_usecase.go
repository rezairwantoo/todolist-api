// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/subtask/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	model "reza/todolist-api/model"

	gomock "github.com/golang/mock/gomock"
)

// MockSubTaskUsecase is a mock of SubTaskUsecase interface.
type MockSubTaskUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockSubTaskUsecaseMockRecorder
}

// MockSubTaskUsecaseMockRecorder is the mock recorder for MockSubTaskUsecase.
type MockSubTaskUsecaseMockRecorder struct {
	mock *MockSubTaskUsecase
}

// NewMockSubTaskUsecase creates a new mock instance.
func NewMockSubTaskUsecase(ctrl *gomock.Controller) *MockSubTaskUsecase {
	mock := &MockSubTaskUsecase{ctrl: ctrl}
	mock.recorder = &MockSubTaskUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubTaskUsecase) EXPECT() *MockSubTaskUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSubTaskUsecase) Create(ctx context.Context, req model.CreateSubTaskRequest) (model.CreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, req)
	ret0, _ := ret[0].(model.CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSubTaskUsecaseMockRecorder) Create(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSubTaskUsecase)(nil).Create), ctx, req)
}
